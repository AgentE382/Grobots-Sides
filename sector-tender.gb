#side Sector Tender
	#author AgentE382
	#date 4-16-2013
	#seed 1
	#color 0F0
	
	#code
		#const control-channel 1
		#const position-advertisement 1
		#const position-advertisement-length 3
		#const origin-announcement 2
		#const origin-announcement-length 3
		
		#const origin-address 1
	#type Starter
	#decoration 6F0 circle
	#hardware
		processor 1
		bomb 2500
	#code
		#var received-positions
		#vector origin
		#var sector
		#var sector-width
		
		#const sector-width-address 3
		
		#start
			origin-address vread 2dup 0 > swap 0 > and if	; if origin is already determined, skip to the end
				origin!
			else	; you're in the seed, figure it out
				2drop
				position position-advertisement position-advertisement-length control-channel send	; send your position
				id 1 = nif	; you're not controller
					do	; wait for controller's origin announcement, then assign it to origin
						control-channel receive
						dup 0 = nif
							swap origin-announcement = if
								drop
								origin!
								1
							else
								1 - dropn
								0
							then
						then
					until-loop
				else	; controller receives positions then broadcasts averaged origin and puts it in shared menory
					do
						control-channel receive
						swap position-advertisement = if
							drop
							origin v+ origin!
							received-positions 1 + received-positions!
						else
							1 - dropn
						then
					received-positions type type-population = until-loop
					origin type type-population vs/ origin!	; average origin
					origin origin-announcement origin-announcement-length control-channel send	; send it
					origin origin-address vwrite	; write it for offspring
				then
			then	; origin has been determined
			
			; check what sector you're in, based on the origin
			position origin v- rect-to-polar nip	; Subtract the origin vector from the target vector, then convert it to polar form and throw away the magnitude.
			dup signum 0 < if	; Check if the angle is negative.
				pi 2 * +	; Convert it to a high positive angle.
			then
			sector-width-address read dup nif
				drop
				pi 2 * type type-population / sector-width!
				sector-width sector-width-address write
			else
				sector-width!
			then
			sector-width / ceiling sector!	; Divide the angle by the sector width, and ceiling it for human-understandability.
#end