#side Sector Scather
	#author AgentE382
	#date 2-23-2013
	#seed 1
	#color F00
	
	#code
		#const number-of-types 1
		#const control-channel 1
		
		; Messages
		#const fresh-blood 1
		#const sector-check 2
		#const sector-taken 3
		
		#const bcast 99999
		
		; Shared Memory
		#const origin-shared-memory-address 999
		#const sector-width-shared-memory-start-address 999
		
		#var sector-width
		#var sector
		
		#vector origin
		
		set-sector-width:	; -- 	Set the sector width of a type based on how many robots of this type are alive.
			pi 2 * type type-population / sector-width!	; Divide 2pi by the number of robots of this type, producing an angle.
			sector-width sector-width-shared-memory-start-address type - write	; Update shared memory
		return
		
		get-sector:	; target -- sector	Checks what sector a target is in, based on the origin.
			origin v- rect-to-polar nip	; Subtract the origin vector from the target vector, then convert it to polar form and throw away the magnitude.
			dup signum 0 < if	; Check if the angle is negative.
				pi 2 * +	; Convert it to a high positive angle.
			then
			sector-width / ceiling	; Divide the angle by the sector width, and ceiling it for human-understandability.
		return
		
		get-origin:	; -- 	Gets origin from shared memory.
			origin-shared-memory-address vread origin!	; Get the origin from shared memory and set the variable.
		return
		
		get-sector-width:	; -- 	Gets sector width from shared memory.
			sector-width-shared-memory-start-address type - read sector-width!	; Get the sector width from shared memory and set the variable.
		return
		
		send-location:	; -- 	Puts position in shared memory.
			position fresh-blood bcast 4 control-channel send	; Put my position in shared memory based on my id.
		return
			
		check-sector:
			id sector sector-check bcast 4 control-channel send
			sync
		return
		
	#type Starter
	#decoration F60 triangle
	#hardware
			processor 50
			engine .125
			solar-cells .125
			constructor .125
			food-sensor 18 1
			eater .125
			energy 500 50
	#code
		set-origin:
			type type-population 1 > if	; Check if there are other robots of this type.
				sync
				do control-channel receive while	; Check if a valid vector was at the shared memory location. If not, stop looping.
					drop
					fresh-blood = if
						origin v+ origin!	; Add shared memory value to variable.
					then
				loop
				origin type type-population vs/ origin!	; Divide the total by the amount of times looped, producing the average and update the variable.
			else
				position origin!	; Origin is my position.
			then
			origin origin-shared-memory-address vwrite	; Update the shared memory.
		return
		
		sector-check-handler:
			sector = if
				dup id > if
					sector-taken swap 2 control-channel send
				else
					drop
				then
			else
				drop
			then
		return
		
		sector-taken-handler:
			sector 1 + sector!
			sector type type-population > if
				sector type type-population - sector!
			then
			check-sector
		return
		
		fresh-blood-handler:
			get-sector-width
			check-sector
		return
		
		#start
		1 constructor-type!
		constructor-max-rate constructor-rate!
		send-location
		get-origin
		origin or nif
			set-origin
		then
		set-sector-width
		position get-sector sector!
		check-sector
		
		do
			do control-channel receive while
				dup id = swap bcast = or if
					dup sector-check = if
						drop sector-check-handler
					else dup sector-taken = if
						drop sector-taken-handler
					celse dup fresh-blood = if
						drop fresh-blood-handler
					celse
						drop
					then
				then
			loop

			food-collision nif
;				type type-population 2 / sector-width sector * sector-width 2 / - polar-to-rect origin v+ seek-location
				30 periodic-food-sensor drop
				food-position seek-location
			else
				0 0 engine-velocity!
			then
		forever
#end
